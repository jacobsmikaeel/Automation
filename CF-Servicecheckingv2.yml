AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda that checks AWS Health API and notifies via SNS.

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to receive AWS service status notifications.

Resources:

  ServiceHealthSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AWS Service Health Topic
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaServiceHealthCheckRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaServiceHealthPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - health:DescribeEvents
                  - sns:Publish
                Resource: "*"

  ServiceHealthCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ServiceHealthCheck
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServiceHealthSNSTopic
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os

          def lambda_handler(event, context):
              health = boto3.client('health')
              sns = boto3.client('sns')
              topic_arn = os.environ['SNS_TOPIC_ARN']

              now = datetime.datetime.utcnow()
              start_time = now - datetime.timedelta(hours=24)

              try:
                  response = health.describe_events(
                      filter={
                          'startTimes': [
                              {
                                  'from': start_time,
                                  'to': now
                              }
                          ],
                          'eventStatusCodes': ['open', 'upcoming']
                      }
                  )

                  events = response.get('events', [])
                  if not events:
                      message = "All AWS services are running fine."
                  else:
                      message = f"{len(events)} issue(s) detected:\n"
                      for e in events:
                          message += f"- Service: {e['service']}, Event Type: {e['eventTypeCode']}, Category: {e['eventTypeCategory']}\n"

                  sns.publish(
                      TopicArn=topic_arn,
                      Subject="AWS Service Health Report",
                      Message=message
                  )

              except Exception as err:
                  error_message = f"Error during health check: {str(err)}"
                  print(error_message)
                  sns.publish(
                      TopicArn=topic_arn,
                      Subject="AWS Health Check Error",
                      Message=error_message
                  )
                  raise

Outputs:
  LambdaFunctionName:
    Value: !Ref ServiceHealthCheckLambda
    Description: Name of the Lambda function

  SNSTopicArn:
    Value: !Ref ServiceHealthSNSTopic
    Description: SNS topic ARN for notifications
