AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda to check AWS Health and post to SNS if no issues found.

Resources:

  HealthCheckFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HealthCheckLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaHealthCheckPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - health:DescribeEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  HealthCheckSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: HealthCheckStatusTopic

  HealthCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HealthCheckLambda
      Handler: index.lambda_handler
      Role: !GetAtt HealthCheckFunctionRole.Arn
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref HealthCheckSNSTopic
      Code:
        ZipFile: |
          import boto3
          import os
          import datetime

          def lambda_handler(event, context):
              health = boto3.client('health', region_name='us-east-1')
              sns = boto3.client('sns')
              
              now = datetime.datetime.utcnow()
              past = now - datetime.timedelta(days=1)

              try:
                  response = health.describe_events(
                      filter={
                          'startTimes': [
                              {
                                  'from': past,
                                  'to': now
                              }
                          ],
                          'eventStatusCodes': ['open', 'upcoming']
                      }
                  )
                  
                  events = response.get('events', [])
                  
                  if not events:
                      sns.publish(
                          TopicArn=os.environ['SNS_TOPIC_ARN'],
                          Subject='AWS Health Status',
                          Message='âœ… All AWS services are running fine.'
                      )
                  else:
                      print(f"Found {len(events)} AWS Health events.")
              except Exception as e:
                  print(f"Error: {str(e)}")

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda Function
    Value: !GetAtt HealthCheckFunction.Arn

  SNSTopicArn:
    Description: ARN of the SNS Topic
    Value: !Ref HealthCheckSNSTopic
