AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda with EventBridge rule to check AWS Health and notify via SNS daily.

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to receive AWS service health notifications.

Resources:

  HealthSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AWS Health Notifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaHealthCheckWithSchedulerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: HealthCheckPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - health:DescribeEvents
                  - sns:Publish
                Resource: "*"

  HealthCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AWSHealthStatusChecker
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref HealthSNSTopic
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os

          def lambda_handler(event, context):
              client = boto3.client('health')
              sns = boto3.client('sns')
              topic_arn = os.environ['SNS_TOPIC_ARN']

              now = datetime.datetime.utcnow()
              start_time = now - datetime.timedelta(hours=24)

              try:
                  response = client.describe_events(
                      filter={
                          'startTimes': [
                              {
                                  'from': start_time,
                                  'to': now
                              }
                          ],
                          'eventStatusCodes': ['open', 'upcoming']
                      }
                  )

                  events = response.get('events', [])
                  if events:
                      message = f"{len(events)} AWS service issue(s) detected:\n"
                      for event in events:
                          message += f"- Service: {event['service']}, Type: {event['eventTypeCode']}, Category: {event['eventTypeCategory']}\n"
                  else:
                      message = "All AWS services are running fine."

                  sns.publish(
                      TopicArn=topic_arn,
                      Subject="AWS Health Check Notification",
                      Message=message
                  )

              except Exception as e:
                  error_message = f"Health check failed: {str(e)}"
                  sns.publish(
                      TopicArn=topic_arn,
                      Subject="AWS Health Check Error",
                      Message=error_message
                  )
                  raise

  HealthCheckScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DailyHealthCheckRule
      ScheduleExpression: cron(0 7 * * ? *)  # Daily at 07:00 UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt HealthCheckLambda.Arn
          Id: HealthCheckLambdaTarget

  PermissionForEventBridgeInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthCheckLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HealthCheckScheduleRule.Arn

Outputs:
  LambdaFunctionName:
    Value: !Ref HealthCheckLambda
    Description: Name of the Lambda function

  SNSTopicArn:
    Value: !Ref HealthSNSTopic
    Description: ARN of the SNS topic
