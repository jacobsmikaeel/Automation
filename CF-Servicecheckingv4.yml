AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda that sets up EventBridge to check AWS Health API and notify via SNS.

Parameters:
  NotificationEmail:
    Type: String
    Description: Email to receive AWS Health notifications

Resources:

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AWS Health Notifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaHealthEventBridgeSetupRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sns:Publish
                  - health:DescribeEvents
                  - events:PutRule
                  - events:PutTargets
                  - lambda:AddPermission
                  - events:DescribeRule
                Resource: "*"

  HealthCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateHealthCheckEventRule
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os

          def lambda_handler(event, context):
              sns_topic = os.environ['SNS_TOPIC_ARN']
              function_name = context.function_name
              lambda_arn = context.invoked_function_arn

              # Step 1: Create EventBridge rule to run daily
              eb = boto3.client('events')
              rule_name = 'DailyAWSHealthCheckRule'

              try:
                  rule_response = eb.put_rule(
                      Name=rule_name,
                      ScheduleExpression='cron(0 7 * * ? *)',  # 7 AM UTC daily
                      State='ENABLED',
                      Description='Daily check for AWS Health events'
                  )

                  rule_arn = rule_response['RuleArn']

                  eb.put_targets(
                      Rule=rule_name,
                      Targets=[
                          {
                              'Id': 'HealthCheckTarget',
                              'Arn': lambda_arn
                          }
                      ]
                  )

                  # Step 2: Allow EventBridge to invoke Lambda
                  lambda_client = boto3.client('lambda')
                  try:
                      lambda_client.add_permission(
                          FunctionName=function_name,
                          StatementId='EventBridgeInvokeLambda',
                          Action='lambda:InvokeFunction',
                          Principal='events.amazonaws.com',
                          SourceArn=rule_arn
                      )
                  except lambda_client.exceptions.ResourceConflictException:
                      pass  # Permission already exists

              except Exception as e:
                  print(f"EventBridge rule setup failed: {str(e)}")

              # Step 3: Check AWS Health API
              health = boto3.client('health')
              sns = boto3.client('sns')
              now = datetime.datetime.utcnow()
              start_time = now - datetime.timedelta(hours=24)

              try:
                  response = health.describe_events(
                      filter={
                          'startTimes': [
                              {
                                  'from': start_time,
                                  'to': now
                              }
                          ],
                          'eventStatusCodes': ['open', 'upcoming']
                      }
                  )

                  events = response.get('events', [])
                  if not events:
                      message = "All AWS services are running fine."
                  else:
                      message = f"{len(events)} issue(s) detected:\n"
                      for event in events:
                          message += f"- {event['service']} - {event['eventTypeCode']} - {event['eventTypeCategory']}\n"

                  sns.publish(
                      TopicArn=sns_topic,
                      Subject="AWS Health Check Notification",
                      Message=message
                  )

              except Exception as e:
                  sns.publish(
                      TopicArn=sns_topic,
                      Subject="AWS Health Check Error",
                      Message=f"Error occurred while checking AWS Health: {str(e)}"
                  )
                  raise

Outputs:
  LambdaFunctionName:
    Value: !Ref HealthCheckLambda
    Description: Lambda function name

  SNSTopicArn:
    Value: !Ref SNSTopic
    Description: ARN of the SNS topic
